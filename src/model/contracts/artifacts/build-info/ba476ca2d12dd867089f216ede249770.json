{
	"id": "ba476ca2d12dd867089f216ede249770",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.18",
	"solcLongVersion": "0.8.18+commit.87f61d96",
	"input": {
		"language": "Solidity",
		"sources": {
			"ProfileRegistry.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./AccessControlledStorage.sol\";\nimport \"./AccessControlBits.sol\";\n\n\ncontract ProfileRegistry is AccessControlledStorage {\n\n  address owner = msg.sender;\n\n  function getAccessPermissions( address user, uint256 contentId ) external view override returns (uint256) {\n    if (uint256(uint160(user)) == contentId) return RWA_BITS;\n    if (user == owner && contentId == 0) return RWA_BITS;\n    if (contentId == 0) return NO_PERMISSIONS;\n    return READ_BIT;\n  }\n\n}"
			},
			"AccessControlBits.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @dev Access control bits, as returned by the AccessControlledStorage getAccessPermissions \n * method.\n * \n * Permissions are a 256 bit field formatted with posix-like file permissions.  Only the top\n * 16 most significant bits are reserved for Bubble Protocol.  The rest are free for\n * application use.\n * \n *   Bit    Purpose\n *   -----  -------------------------------------------------\n *   255       terminated (1 = bubble terminated, 0 = active)\n *   254       directory\n *   253       read\n *   252       write\n *   251       append\n *   250       execute\n *   240..249  reserved for Bubble Protocol future extension\n *   0..239    user-defined\n */\n\n// Bits\nuint constant BUBBLE_TERMINATED_BIT = 1 << 255;\nuint constant DIRECTORY_BIT = 1 << 254;\nuint constant READ_BIT = 1 << 253;\nuint constant WRITE_BIT = 1 << 252;\nuint constant APPEND_BIT = 1 << 251;\nuint constant EXECUTE_BIT = 1 << 250;\n\n// Combinations\nuint constant NO_PERMISSIONS = 0;\nuint constant RWA_BITS = 7 << 251;\nuint constant DRWA_BITS = 15 << 251;\nuint constant RWAX_BITS = 15 << 250;\n"
			},
			"AccessControlledStorage.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * AccessControlledStorage interface\n * \n * Any smart contract that implements this interface can control off-chain storage using the \n * Bubble Protocol.\n */\n\ninterface AccessControlledStorage {\n\n  /**\n   * Provides the access permissions for off-chain content controlled by this contract.  An \n   * off-chain storage service calls this method to obtain a specific user's permissions for \n   * accessing a given file or directory.  The method must return a bit field, with POSIX-like \n   * bits for terminated, directory, read, write, append and execute (tdrwax).\n   * \n   * See AccessControlBits.sol for a complete definition of the bit field returned by this\n   * method.\n   * \n   * Note, the following content IDs are reserved:\n   * \n   *   CID  Purpose\n   *   ---  ------------------------------------------------------------------------------------------\n   *   0    The root of the bubble itself.  Any user with write permission to id 0 can construct the \n   *        bubble on an off-chain storage service.  Any user with read permission can list the\n   *        contents of the bubble's root directory.  ID 0 is always considered a directory and so the \n   *        Directory Bit permission returned by this contract is ignored.  \n   * \n   * @param user the user requesting access\n   * @param contentId the id of the content (file or directory) being requested\n   */\n\n  function getAccessPermissions( address user, uint256 contentId ) external view returns (uint256);\n\n}\n\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"AccessControlledStorage.sol": {
				"AccessControlledStorage": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "contentId",
									"type": "uint256"
								}
							],
							"name": "getAccessPermissions",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"getAccessPermissions(address,uint256)": {
								"params": {
									"contentId": "the id of the content (file or directory) being requested",
									"user": "the user requesting access"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"getAccessPermissions(address,uint256)": "c48dbf6a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contentId\",\"type\":\"uint256\"}],\"name\":\"getAccessPermissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAccessPermissions(address,uint256)\":{\"params\":{\"contentId\":\"the id of the content (file or directory) being requested\",\"user\":\"the user requesting access\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAccessPermissions(address,uint256)\":{\"notice\":\"Provides the access permissions for off-chain content controlled by this contract.  An  off-chain storage service calls this method to obtain a specific user's permissions for  accessing a given file or directory.  The method must return a bit field, with POSIX-like  bits for terminated, directory, read, write, append and execute (tdrwax).  See AccessControlBits.sol for a complete definition of the bit field returned by this method.  Note, the following content IDs are reserved:    CID  Purpose   ---  ------------------------------------------------------------------------------------------   0    The root of the bubble itself.  Any user with write permission to id 0 can construct the         bubble on an off-chain storage service.  Any user with read permission can list the        contents of the bubble's root directory.  ID 0 is always considered a directory and so the         Directory Bit permission returned by this contract is ignored.   \"}},\"notice\":\"AccessControlledStorage interface  Any smart contract that implements this interface can control off-chain storage using the  Bubble Protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"AccessControlledStorage.sol\":\"AccessControlledStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"AccessControlledStorage.sol\":{\"keccak256\":\"0x87fcb849962c533440b276e5db948b1ab7e65bd1039f6449883a409a54ac1f3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://03325e566a6d0099248d055ca40ef0622f8d61c7d6fd01ff7fce6d53ef673ee6\",\"dweb:/ipfs/QmPdX8ZCmwKTm6o37ZYipgaEWUwHzgPYuZd5yXfdeE1tpK\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"getAccessPermissions(address,uint256)": {
								"notice": "Provides the access permissions for off-chain content controlled by this contract.  An  off-chain storage service calls this method to obtain a specific user's permissions for  accessing a given file or directory.  The method must return a bit field, with POSIX-like  bits for terminated, directory, read, write, append and execute (tdrwax).  See AccessControlBits.sol for a complete definition of the bit field returned by this method.  Note, the following content IDs are reserved:    CID  Purpose   ---  ------------------------------------------------------------------------------------------   0    The root of the bubble itself.  Any user with write permission to id 0 can construct the         bubble on an off-chain storage service.  Any user with read permission can list the        contents of the bubble's root directory.  ID 0 is always considered a directory and so the         Directory Bit permission returned by this contract is ignored.   "
							}
						},
						"notice": "AccessControlledStorage interface  Any smart contract that implements this interface can control off-chain storage using the  Bubble Protocol.",
						"version": 1
					}
				}
			},
			"ProfileRegistry.sol": {
				"ProfileRegistry": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "contentId",
									"type": "uint256"
								}
							],
							"name": "getAccessPermissions",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"getAccessPermissions(address,uint256)": {
								"params": {
									"contentId": "the id of the content (file or directory) being requested",
									"user": "the user requesting access"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"ProfileRegistry.sol\":134:524  contract ProfileRegistry is AccessControlledStorage {... */\n  mstore(0x40, 0x80)\n    /* \"ProfileRegistry.sol\":207:217  msg.sender */\n  caller\n    /* \"ProfileRegistry.sol\":191:217  address owner = msg.sender */\n  0x00\n  dup1\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"ProfileRegistry.sol\":134:524  contract ProfileRegistry is AccessControlledStorage {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"ProfileRegistry.sol\":134:524  contract ProfileRegistry is AccessControlledStorage {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xc48dbf6a\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"ProfileRegistry.sol\":222:521  function getAccessPermissions( address user, uint256 contentId ) external view override returns (uint256) {... */\n    tag_3:\n      tag_4\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_5\n      swap2\n      swap1\n      tag_6\n      jump\t// in\n    tag_5:\n      tag_7\n      jump\t// in\n    tag_4:\n      mload(0x40)\n      tag_8\n      swap2\n      swap1\n      tag_9\n      jump\t// in\n    tag_8:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n    tag_7:\n        /* \"ProfileRegistry.sol\":319:326  uint256 */\n      0x00\n        /* \"ProfileRegistry.sol\":364:373  contentId */\n      dup2\n        /* \"ProfileRegistry.sol\":354:358  user */\n      dup4\n        /* \"ProfileRegistry.sol\":338:360  uint256(uint160(user)) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ProfileRegistry.sol\":338:373  uint256(uint160(user)) == contentId */\n      sub\n        /* \"ProfileRegistry.sol\":334:390  if (uint256(uint160(user)) == contentId) return RWA_BITS */\n      tag_11\n      jumpi\n        /* \"AccessControlBits.sol\":1039:1047  7 << 251 */\n      0x3800000000000000000000000000000000000000000000000000000000000000\n        /* \"ProfileRegistry.sol\":375:390  return RWA_BITS */\n      swap1\n      pop\n      jump(tag_10)\n        /* \"ProfileRegistry.sol\":334:390  if (uint256(uint160(user)) == contentId) return RWA_BITS */\n    tag_11:\n        /* \"ProfileRegistry.sol\":408:413  owner */\n      0x00\n      dup1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ProfileRegistry.sol\":400:413  user == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"ProfileRegistry.sol\":400:404  user */\n      dup4\n        /* \"ProfileRegistry.sol\":400:413  user == owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"ProfileRegistry.sol\":400:431  user == owner && contentId == 0 */\n      dup1\n      iszero\n      tag_12\n      jumpi\n      pop\n        /* \"ProfileRegistry.sol\":430:431  0 */\n      0x00\n        /* \"ProfileRegistry.sol\":417:426  contentId */\n      dup3\n        /* \"ProfileRegistry.sol\":417:431  contentId == 0 */\n      eq\n        /* \"ProfileRegistry.sol\":400:431  user == owner && contentId == 0 */\n    tag_12:\n        /* \"ProfileRegistry.sol\":396:448  if (user == owner && contentId == 0) return RWA_BITS */\n      iszero\n      tag_13\n      jumpi\n        /* \"AccessControlBits.sol\":1039:1047  7 << 251 */\n      0x3800000000000000000000000000000000000000000000000000000000000000\n        /* \"ProfileRegistry.sol\":433:448  return RWA_BITS */\n      swap1\n      pop\n      jump(tag_10)\n        /* \"ProfileRegistry.sol\":396:448  if (user == owner && contentId == 0) return RWA_BITS */\n    tag_13:\n        /* \"ProfileRegistry.sol\":471:472  0 */\n      0x00\n        /* \"ProfileRegistry.sol\":458:467  contentId */\n      dup3\n        /* \"ProfileRegistry.sol\":458:472  contentId == 0 */\n      sub\n        /* \"ProfileRegistry.sol\":454:495  if (contentId == 0) return NO_PERMISSIONS */\n      tag_14\n      jumpi\n        /* \"AccessControlBits.sol\":1011:1012  0 */\n      0x00\n        /* \"ProfileRegistry.sol\":474:495  return NO_PERMISSIONS */\n      swap1\n      pop\n      jump(tag_10)\n        /* \"ProfileRegistry.sol\":454:495  if (contentId == 0) return NO_PERMISSIONS */\n    tag_14:\n        /* \"AccessControlBits.sol\":842:850  1 << 253 */\n      0x2000000000000000000000000000000000000000000000000000000000000000\n        /* \"ProfileRegistry.sol\":501:516  return READ_BIT */\n      swap1\n      pop\n        /* \"ProfileRegistry.sol\":222:521  function getAccessPermissions( address user, uint256 contentId ) external view override returns (uint256) {... */\n    tag_10:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":88:205   */\n    tag_16:\n        /* \"#utility.yul\":197:198   */\n      0x00\n        /* \"#utility.yul\":194:195   */\n      dup1\n        /* \"#utility.yul\":187:199   */\n      revert\n        /* \"#utility.yul\":334:460   */\n    tag_18:\n        /* \"#utility.yul\":371:378   */\n      0x00\n        /* \"#utility.yul\":411:453   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":404:409   */\n      dup3\n        /* \"#utility.yul\":400:454   */\n      and\n        /* \"#utility.yul\":389:454   */\n      swap1\n      pop\n        /* \"#utility.yul\":334:460   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":466:562   */\n    tag_19:\n        /* \"#utility.yul\":503:510   */\n      0x00\n        /* \"#utility.yul\":532:556   */\n      tag_32\n        /* \"#utility.yul\":550:555   */\n      dup3\n        /* \"#utility.yul\":532:556   */\n      tag_18\n      jump\t// in\n    tag_32:\n        /* \"#utility.yul\":521:556   */\n      swap1\n      pop\n        /* \"#utility.yul\":466:562   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":568:690   */\n    tag_20:\n        /* \"#utility.yul\":641:665   */\n      tag_34\n        /* \"#utility.yul\":659:664   */\n      dup2\n        /* \"#utility.yul\":641:665   */\n      tag_19\n      jump\t// in\n    tag_34:\n        /* \"#utility.yul\":634:639   */\n      dup2\n        /* \"#utility.yul\":631:666   */\n      eq\n        /* \"#utility.yul\":621:684   */\n      tag_35\n      jumpi\n        /* \"#utility.yul\":680:681   */\n      0x00\n        /* \"#utility.yul\":677:678   */\n      dup1\n        /* \"#utility.yul\":670:682   */\n      revert\n        /* \"#utility.yul\":621:684   */\n    tag_35:\n        /* \"#utility.yul\":568:690   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":696:835   */\n    tag_21:\n        /* \"#utility.yul\":742:747   */\n      0x00\n        /* \"#utility.yul\":780:786   */\n      dup2\n        /* \"#utility.yul\":767:787   */\n      calldataload\n        /* \"#utility.yul\":758:787   */\n      swap1\n      pop\n        /* \"#utility.yul\":796:829   */\n      tag_37\n        /* \"#utility.yul\":823:828   */\n      dup2\n        /* \"#utility.yul\":796:829   */\n      tag_20\n      jump\t// in\n    tag_37:\n        /* \"#utility.yul\":696:835   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":841:918   */\n    tag_22:\n        /* \"#utility.yul\":878:885   */\n      0x00\n        /* \"#utility.yul\":907:912   */\n      dup2\n        /* \"#utility.yul\":896:912   */\n      swap1\n      pop\n        /* \"#utility.yul\":841:918   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":924:1046   */\n    tag_23:\n        /* \"#utility.yul\":997:1021   */\n      tag_40\n        /* \"#utility.yul\":1015:1020   */\n      dup2\n        /* \"#utility.yul\":997:1021   */\n      tag_22\n      jump\t// in\n    tag_40:\n        /* \"#utility.yul\":990:995   */\n      dup2\n        /* \"#utility.yul\":987:1022   */\n      eq\n        /* \"#utility.yul\":977:1040   */\n      tag_41\n      jumpi\n        /* \"#utility.yul\":1036:1037   */\n      0x00\n        /* \"#utility.yul\":1033:1034   */\n      dup1\n        /* \"#utility.yul\":1026:1038   */\n      revert\n        /* \"#utility.yul\":977:1040   */\n    tag_41:\n        /* \"#utility.yul\":924:1046   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1052:1191   */\n    tag_24:\n        /* \"#utility.yul\":1098:1103   */\n      0x00\n        /* \"#utility.yul\":1136:1142   */\n      dup2\n        /* \"#utility.yul\":1123:1143   */\n      calldataload\n        /* \"#utility.yul\":1114:1143   */\n      swap1\n      pop\n        /* \"#utility.yul\":1152:1185   */\n      tag_43\n        /* \"#utility.yul\":1179:1184   */\n      dup2\n        /* \"#utility.yul\":1152:1185   */\n      tag_23\n      jump\t// in\n    tag_43:\n        /* \"#utility.yul\":1052:1191   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1197:1671   */\n    tag_6:\n        /* \"#utility.yul\":1265:1271   */\n      0x00\n        /* \"#utility.yul\":1273:1279   */\n      dup1\n        /* \"#utility.yul\":1322:1324   */\n      0x40\n        /* \"#utility.yul\":1310:1319   */\n      dup4\n        /* \"#utility.yul\":1301:1308   */\n      dup6\n        /* \"#utility.yul\":1297:1320   */\n      sub\n        /* \"#utility.yul\":1293:1325   */\n      slt\n        /* \"#utility.yul\":1290:1409   */\n      iszero\n      tag_45\n      jumpi\n        /* \"#utility.yul\":1328:1407   */\n      tag_46\n      tag_16\n      jump\t// in\n    tag_46:\n        /* \"#utility.yul\":1290:1409   */\n    tag_45:\n        /* \"#utility.yul\":1448:1449   */\n      0x00\n        /* \"#utility.yul\":1473:1526   */\n      tag_47\n        /* \"#utility.yul\":1518:1525   */\n      dup6\n        /* \"#utility.yul\":1509:1515   */\n      dup3\n        /* \"#utility.yul\":1498:1507   */\n      dup7\n        /* \"#utility.yul\":1494:1516   */\n      add\n        /* \"#utility.yul\":1473:1526   */\n      tag_21\n      jump\t// in\n    tag_47:\n        /* \"#utility.yul\":1463:1526   */\n      swap3\n      pop\n        /* \"#utility.yul\":1419:1536   */\n      pop\n        /* \"#utility.yul\":1575:1577   */\n      0x20\n        /* \"#utility.yul\":1601:1654   */\n      tag_48\n        /* \"#utility.yul\":1646:1653   */\n      dup6\n        /* \"#utility.yul\":1637:1643   */\n      dup3\n        /* \"#utility.yul\":1626:1635   */\n      dup7\n        /* \"#utility.yul\":1622:1644   */\n      add\n        /* \"#utility.yul\":1601:1654   */\n      tag_24\n      jump\t// in\n    tag_48:\n        /* \"#utility.yul\":1591:1654   */\n      swap2\n      pop\n        /* \"#utility.yul\":1546:1664   */\n      pop\n        /* \"#utility.yul\":1197:1671   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1677:1795   */\n    tag_25:\n        /* \"#utility.yul\":1764:1788   */\n      tag_50\n        /* \"#utility.yul\":1782:1787   */\n      dup2\n        /* \"#utility.yul\":1764:1788   */\n      tag_22\n      jump\t// in\n    tag_50:\n        /* \"#utility.yul\":1759:1762   */\n      dup3\n        /* \"#utility.yul\":1752:1789   */\n      mstore\n        /* \"#utility.yul\":1677:1795   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1801:2023   */\n    tag_9:\n        /* \"#utility.yul\":1894:1898   */\n      0x00\n        /* \"#utility.yul\":1932:1934   */\n      0x20\n        /* \"#utility.yul\":1921:1930   */\n      dup3\n        /* \"#utility.yul\":1917:1935   */\n      add\n        /* \"#utility.yul\":1909:1935   */\n      swap1\n      pop\n        /* \"#utility.yul\":1945:2016   */\n      tag_52\n        /* \"#utility.yul\":2013:2014   */\n      0x00\n        /* \"#utility.yul\":2002:2011   */\n      dup4\n        /* \"#utility.yul\":1998:2015   */\n      add\n        /* \"#utility.yul\":1989:1995   */\n      dup5\n        /* \"#utility.yul\":1945:2016   */\n      tag_25\n      jump\t// in\n    tag_52:\n        /* \"#utility.yul\":1801:2023   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220fa52022b0c25aca35767c324565cd7f58a7ef1b35b38d0cd4da361aa1697f86064736f6c63430008120033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561005057600080fd5b506102a3806100606000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c48dbf6a14610030575b600080fd5b61004a60048036038101906100459190610203565b610060565b6040516100579190610252565b60405180910390f35b6000818373ffffffffffffffffffffffffffffffffffffffff16036100a7577f38000000000000000000000000000000000000000000000000000000000000009050610164565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480156101025750600082145b1561012f577f38000000000000000000000000000000000000000000000000000000000000009050610164565b600082036101405760009050610164565b7f200000000000000000000000000000000000000000000000000000000000000090505b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061019a8261016f565b9050919050565b6101aa8161018f565b81146101b557600080fd5b50565b6000813590506101c7816101a1565b92915050565b6000819050919050565b6101e0816101cd565b81146101eb57600080fd5b50565b6000813590506101fd816101d7565b92915050565b6000806040838503121561021a5761021961016a565b5b6000610228858286016101b8565b9250506020610239858286016101ee565b9150509250929050565b61024c816101cd565b82525050565b60006020820190506102676000830184610243565b9291505056fea2646970667358221220fa52022b0c25aca35767c324565cd7f58a7ef1b35b38d0cd4da361aa1697f86064736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH2 0x50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2A3 DUP1 PUSH2 0x60 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC48DBF6A EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x45 SWAP2 SWAP1 PUSH2 0x203 JUMP JUMPDEST PUSH2 0x60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x57 SWAP2 SWAP1 PUSH2 0x252 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA7 JUMPI PUSH32 0x3800000000000000000000000000000000000000000000000000000000000000 SWAP1 POP PUSH2 0x164 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x102 JUMPI POP PUSH1 0x0 DUP3 EQ JUMPDEST ISZERO PUSH2 0x12F JUMPI PUSH32 0x3800000000000000000000000000000000000000000000000000000000000000 SWAP1 POP PUSH2 0x164 JUMP JUMPDEST PUSH1 0x0 DUP3 SUB PUSH2 0x140 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x164 JUMP JUMPDEST PUSH32 0x2000000000000000000000000000000000000000000000000000000000000000 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19A DUP3 PUSH2 0x16F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AA DUP2 PUSH2 0x18F JUMP JUMPDEST DUP2 EQ PUSH2 0x1B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1C7 DUP2 PUSH2 0x1A1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E0 DUP2 PUSH2 0x1CD JUMP JUMPDEST DUP2 EQ PUSH2 0x1EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1FD DUP2 PUSH2 0x1D7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x21A JUMPI PUSH2 0x219 PUSH2 0x16A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x228 DUP6 DUP3 DUP7 ADD PUSH2 0x1B8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x239 DUP6 DUP3 DUP7 ADD PUSH2 0x1EE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x24C DUP2 PUSH2 0x1CD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x267 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x243 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL MSTORE MUL 0x2B 0xC 0x25 0xAC LOG3 JUMPI PUSH8 0xC324565CD7F58A7E CALL 0xB3 JUMPDEST CODESIZE 0xD0 0xCD 0x4D LOG3 PUSH2 0xAA16 SWAP8 0xF8 PUSH1 0x64 PUSH20 0x6F6C634300081200330000000000000000000000 ",
							"sourceMap": "134:390:2:-:0;;;207:10;191:26;;;;;;;;;;;;;;;;;;;;134:390;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@getAccessPermissions_115": {
									"entryPoint": 96,
									"id": 115,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 440,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 494,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 515,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 579,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 594,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 399,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 367,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 461,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 362,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 417,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 471,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:2026:3",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "47:35:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "57:19:3",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "73:2:3",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "67:9:3"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:3"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "40:6:3",
														"type": ""
													}
												],
												"src": "7:75:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "177:28:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "194:1:3",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "197:1:3",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "187:12:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "187:12:3"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:28:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "317:1:3",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "320:1:3",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "310:12:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "310:12:3"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "379:81:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "389:65:3",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "411:42:3",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "400:54:3"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:3"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "361:5:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "371:7:3",
														"type": ""
													}
												],
												"src": "334:126:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "511:51:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "521:35:3",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:3"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "532:24:3"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:3"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "493:5:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "503:7:3",
														"type": ""
													}
												],
												"src": "466:96:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "611:79:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "668:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "677:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "680:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:3"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:3"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:3"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "624:43:3"
															},
															"nodeType": "YulIf",
															"src": "621:63:3"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "604:5:3",
														"type": ""
													}
												],
												"src": "568:122:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "748:87:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "758:29:3",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "780:6:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "767:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "767:20:3"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "758:5:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "823:5:3"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "796:26:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "796:33:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "796:33:3"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "726:6:3",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "734:3:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "742:5:3",
														"type": ""
													}
												],
												"src": "696:139:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "886:32:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "896:16:3",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "907:5:3"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "896:7:3"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "868:5:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "878:7:3",
														"type": ""
													}
												],
												"src": "841:77:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "967:79:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1024:16:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1033:1:3",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1036:1:3",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1026:6:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1026:12:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1026:12:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "990:5:3"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1015:5:3"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "997:17:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "997:24:3"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "987:2:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "987:35:3"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "980:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "980:43:3"
															},
															"nodeType": "YulIf",
															"src": "977:63:3"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "960:5:3",
														"type": ""
													}
												],
												"src": "924:122:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1104:87:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1114:29:3",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1136:6:3"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1123:12:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1123:20:3"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1114:5:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1179:5:3"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "1152:26:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1152:33:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1152:33:3"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1082:6:3",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1090:3:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1098:5:3",
														"type": ""
													}
												],
												"src": "1052:139:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1280:391:3",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1326:83:3",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "1328:77:3"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1328:79:3"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1328:79:3"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1301:7:3"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1310:9:3"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1297:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1297:23:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1322:2:3",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1293:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1293:32:3"
															},
															"nodeType": "YulIf",
															"src": "1290:119:3"
														},
														{
															"nodeType": "YulBlock",
															"src": "1419:117:3",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1434:15:3",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1448:1:3",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1438:6:3",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1463:63:3",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1498:9:3"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1509:6:3"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1494:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1494:22:3"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1518:7:3"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nodeType": "YulIdentifier",
																			"src": "1473:20:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1473:53:3"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "1463:6:3"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "1546:118:3",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "1561:16:3",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1575:2:3",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "1565:6:3",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "1591:63:3",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "1626:9:3"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "1637:6:3"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1622:3:3"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1622:22:3"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1646:7:3"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1601:20:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1601:53:3"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "1591:6:3"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1242:9:3",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1253:7:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1265:6:3",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1273:6:3",
														"type": ""
													}
												],
												"src": "1197:474:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1742:53:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "1759:3:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1782:5:3"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "1764:17:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1764:24:3"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1752:6:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1752:37:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1752:37:3"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1730:5:3",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1737:3:3",
														"type": ""
													}
												],
												"src": "1677:118:3"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1899:124:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1909:26:3",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1921:9:3"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1932:2:3",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1917:3:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1917:18:3"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1909:4:3"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1989:6:3"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2002:9:3"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2013:1:3",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1998:3:3"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1998:17:3"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "1945:43:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1945:71:3"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1945:71:3"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1871:9:3",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1883:6:3",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1894:4:3",
														"type": ""
													}
												],
												"src": "1801:222:3"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n",
									"id": 3,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c48dbf6a14610030575b600080fd5b61004a60048036038101906100459190610203565b610060565b6040516100579190610252565b60405180910390f35b6000818373ffffffffffffffffffffffffffffffffffffffff16036100a7577f38000000000000000000000000000000000000000000000000000000000000009050610164565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480156101025750600082145b1561012f577f38000000000000000000000000000000000000000000000000000000000000009050610164565b600082036101405760009050610164565b7f200000000000000000000000000000000000000000000000000000000000000090505b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061019a8261016f565b9050919050565b6101aa8161018f565b81146101b557600080fd5b50565b6000813590506101c7816101a1565b92915050565b6000819050919050565b6101e0816101cd565b81146101eb57600080fd5b50565b6000813590506101fd816101d7565b92915050565b6000806040838503121561021a5761021961016a565b5b6000610228858286016101b8565b9250506020610239858286016101ee565b9150509250929050565b61024c816101cd565b82525050565b60006020820190506102676000830184610243565b9291505056fea2646970667358221220fa52022b0c25aca35767c324565cd7f58a7ef1b35b38d0cd4da361aa1697f86064736f6c63430008120033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC48DBF6A EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x45 SWAP2 SWAP1 PUSH2 0x203 JUMP JUMPDEST PUSH2 0x60 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x57 SWAP2 SWAP1 PUSH2 0x252 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP2 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA7 JUMPI PUSH32 0x3800000000000000000000000000000000000000000000000000000000000000 SWAP1 POP PUSH2 0x164 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0x102 JUMPI POP PUSH1 0x0 DUP3 EQ JUMPDEST ISZERO PUSH2 0x12F JUMPI PUSH32 0x3800000000000000000000000000000000000000000000000000000000000000 SWAP1 POP PUSH2 0x164 JUMP JUMPDEST PUSH1 0x0 DUP3 SUB PUSH2 0x140 JUMPI PUSH1 0x0 SWAP1 POP PUSH2 0x164 JUMP JUMPDEST PUSH32 0x2000000000000000000000000000000000000000000000000000000000000000 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19A DUP3 PUSH2 0x16F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AA DUP2 PUSH2 0x18F JUMP JUMPDEST DUP2 EQ PUSH2 0x1B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1C7 DUP2 PUSH2 0x1A1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E0 DUP2 PUSH2 0x1CD JUMP JUMPDEST DUP2 EQ PUSH2 0x1EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1FD DUP2 PUSH2 0x1D7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x21A JUMPI PUSH2 0x219 PUSH2 0x16A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x228 DUP6 DUP3 DUP7 ADD PUSH2 0x1B8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x239 DUP6 DUP3 DUP7 ADD PUSH2 0x1EE JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x24C DUP2 PUSH2 0x1CD JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x267 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x243 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL MSTORE MUL 0x2B 0xC 0x25 0xAC LOG3 JUMPI PUSH8 0xC324565CD7F58A7E CALL 0xB3 JUMPDEST CODESIZE 0xD0 0xCD 0x4D LOG3 PUSH2 0xAA16 SWAP8 0xF8 PUSH1 0x64 PUSH20 0x6F6C634300081200330000000000000000000000 ",
							"sourceMap": "134:390:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;222:299;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;319:7;364:9;354:4;338:22;;:35;334:56;;1039:8:0;375:15:2;;;;334:56;408:5;;;;;;;;;;400:13;;:4;:13;;;:31;;;;;430:1;417:9;:14;400:31;396:52;;;1039:8:0;433:15:2;;;;396:52;471:1;458:9;:14;454:41;;1011:1:0;474:21:2;;;;454:41;842:8:0;501:15:2;;222:299;;;;;:::o;88:117:3:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:139::-;742:5;780:6;767:20;758:29;;796:33;823:5;796:33;:::i;:::-;696:139;;;;:::o;841:77::-;878:7;907:5;896:16;;841:77;;;:::o;924:122::-;997:24;1015:5;997:24;:::i;:::-;990:5;987:35;977:63;;1036:1;1033;1026:12;977:63;924:122;:::o;1052:139::-;1098:5;1136:6;1123:20;1114:29;;1152:33;1179:5;1152:33;:::i;:::-;1052:139;;;;:::o;1197:474::-;1265:6;1273;1322:2;1310:9;1301:7;1297:23;1293:32;1290:119;;;1328:79;;:::i;:::-;1290:119;1448:1;1473:53;1518:7;1509:6;1498:9;1494:22;1473:53;:::i;:::-;1463:63;;1419:117;1575:2;1601:53;1646:7;1637:6;1626:9;1622:22;1601:53;:::i;:::-;1591:63;;1546:118;1197:474;;;;;:::o;1677:118::-;1764:24;1782:5;1764:24;:::i;:::-;1759:3;1752:37;1677:118;;:::o;1801:222::-;1894:4;1932:2;1921:9;1917:18;1909:26;;1945:71;2013:1;2002:9;1998:17;1989:6;1945:71;:::i;:::-;1801:222;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "135000",
								"executionCost": "24449",
								"totalCost": "159449"
							},
							"external": {
								"getAccessPermissions(address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 134,
									"end": 524,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 134,
									"end": 524,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 134,
									"end": 524,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 207,
									"end": 217,
									"name": "CALLER",
									"source": 2
								},
								{
									"begin": 191,
									"end": 217,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 191,
									"end": 217,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 191,
									"end": 217,
									"name": "PUSH",
									"source": 2,
									"value": "100"
								},
								{
									"begin": 191,
									"end": 217,
									"name": "EXP",
									"source": 2
								},
								{
									"begin": 191,
									"end": 217,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 191,
									"end": 217,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 191,
									"end": 217,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 191,
									"end": 217,
									"name": "PUSH",
									"source": 2,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 191,
									"end": 217,
									"name": "MUL",
									"source": 2
								},
								{
									"begin": 191,
									"end": 217,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 191,
									"end": 217,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 191,
									"end": 217,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 191,
									"end": 217,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 191,
									"end": 217,
									"name": "PUSH",
									"source": 2,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 191,
									"end": 217,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 191,
									"end": 217,
									"name": "MUL",
									"source": 2
								},
								{
									"begin": 191,
									"end": 217,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 191,
									"end": 217,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 191,
									"end": 217,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 191,
									"end": 217,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 134,
									"end": 524,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 134,
									"end": 524,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 134,
									"end": 524,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 134,
									"end": 524,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 134,
									"end": 524,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 134,
									"end": 524,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 524,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 134,
									"end": 524,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 134,
									"end": 524,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 134,
									"end": 524,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 134,
									"end": 524,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 134,
									"end": 524,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 134,
									"end": 524,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 134,
									"end": 524,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 134,
									"end": 524,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 524,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 134,
									"end": 524,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 134,
									"end": 524,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220fa52022b0c25aca35767c324565cd7f58a7ef1b35b38d0cd4da361aa1697f86064736f6c63430008120033",
									".code": [
										{
											"begin": 134,
											"end": 524,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 134,
											"end": 524,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 134,
											"end": 524,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 134,
											"end": 524,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 134,
											"end": 524,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 134,
											"end": 524,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 134,
											"end": 524,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 134,
											"end": 524,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 134,
											"end": 524,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 134,
											"end": 524,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 134,
											"end": 524,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 134,
											"end": 524,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 134,
											"end": 524,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 134,
											"end": 524,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 134,
											"end": 524,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 134,
											"end": 524,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 134,
											"end": 524,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 134,
											"end": 524,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 134,
											"end": 524,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 134,
											"end": 524,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 134,
											"end": 524,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 134,
											"end": 524,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 134,
											"end": 524,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 134,
											"end": 524,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 134,
											"end": 524,
											"name": "PUSH",
											"source": 2,
											"value": "C48DBF6A"
										},
										{
											"begin": 134,
											"end": 524,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 134,
											"end": 524,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 134,
											"end": 524,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 134,
											"end": 524,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 134,
											"end": 524,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 134,
											"end": 524,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 134,
											"end": 524,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 134,
											"end": 524,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 222,
											"end": 521,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 222,
											"end": 521,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 222,
											"end": 521,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 222,
											"end": 521,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 222,
											"end": 521,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 222,
											"end": 521,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 222,
											"end": 521,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 222,
											"end": 521,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 222,
											"end": 521,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 222,
											"end": 521,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 222,
											"end": 521,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 222,
											"end": 521,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 222,
											"end": 521,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 222,
											"end": 521,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 319,
											"end": 326,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 364,
											"end": 373,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 354,
											"end": 358,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 338,
											"end": 360,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 338,
											"end": 360,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 338,
											"end": 373,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 334,
											"end": 390,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 334,
											"end": 390,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1039,
											"end": 1047,
											"name": "PUSH",
											"source": 0,
											"value": "3800000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 375,
											"end": 390,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 375,
											"end": 390,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 375,
											"end": 390,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 375,
											"end": 390,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 334,
											"end": 390,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 334,
											"end": 390,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 408,
											"end": 413,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 408,
											"end": 413,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 408,
											"end": 413,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 408,
											"end": 413,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 408,
											"end": 413,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 408,
											"end": 413,
											"name": "EXP",
											"source": 2
										},
										{
											"begin": 408,
											"end": 413,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 408,
											"end": 413,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 408,
											"end": 413,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 408,
											"end": 413,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 400,
											"end": 413,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 400,
											"end": 413,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 400,
											"end": 404,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 400,
											"end": 413,
											"name": "PUSH",
											"source": 2,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 400,
											"end": 413,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 400,
											"end": 413,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 400,
											"end": 431,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 400,
											"end": 431,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 400,
											"end": 431,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 400,
											"end": 431,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 400,
											"end": 431,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 430,
											"end": 431,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 417,
											"end": 426,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 417,
											"end": 431,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 400,
											"end": 431,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 400,
											"end": 431,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 396,
											"end": 448,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 396,
											"end": 448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 396,
											"end": 448,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1039,
											"end": 1047,
											"name": "PUSH",
											"source": 0,
											"value": "3800000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 433,
											"end": 448,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 433,
											"end": 448,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 433,
											"end": 448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 433,
											"end": 448,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 396,
											"end": 448,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 396,
											"end": 448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 471,
											"end": 472,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 458,
											"end": 467,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 458,
											"end": 472,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 454,
											"end": 495,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 454,
											"end": 495,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1011,
											"end": 1012,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 474,
											"end": 495,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 474,
											"end": 495,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 474,
											"end": 495,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 474,
											"end": 495,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 454,
											"end": 495,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 454,
											"end": 495,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 842,
											"end": 850,
											"name": "PUSH",
											"source": 0,
											"value": "2000000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 501,
											"end": 516,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 501,
											"end": 516,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 222,
											"end": 521,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 222,
											"end": 521,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 88,
											"end": 205,
											"name": "tag",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 88,
											"end": 205,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 197,
											"end": 198,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 194,
											"end": 195,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 187,
											"end": 199,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 334,
											"end": 460,
											"name": "tag",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 334,
											"end": 460,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 371,
											"end": 378,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 411,
											"end": 453,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 404,
											"end": 409,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 400,
											"end": 454,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 389,
											"end": 454,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 389,
											"end": 454,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 334,
											"end": 460,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 334,
											"end": 460,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 334,
											"end": 460,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 466,
											"end": 562,
											"name": "tag",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 466,
											"end": 562,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 503,
											"end": 510,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 550,
											"end": 555,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 532,
											"end": 556,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 532,
											"end": 556,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 532,
											"end": 556,
											"name": "tag",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 532,
											"end": 556,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 521,
											"end": 556,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 521,
											"end": 556,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 466,
											"end": 562,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 466,
											"end": 562,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 466,
											"end": 562,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 568,
											"end": 690,
											"name": "tag",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 568,
											"end": 690,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 659,
											"end": 664,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 641,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 641,
											"end": 665,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 641,
											"end": 665,
											"name": "tag",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 641,
											"end": 665,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 634,
											"end": 639,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 631,
											"end": 666,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 621,
											"end": 684,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 680,
											"end": 681,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 677,
											"end": 678,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 670,
											"end": 682,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 621,
											"end": 684,
											"name": "tag",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 621,
											"end": 684,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 568,
											"end": 690,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 568,
											"end": 690,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 696,
											"end": 835,
											"name": "tag",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 696,
											"end": 835,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 742,
											"end": 747,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 780,
											"end": 786,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 767,
											"end": 787,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 758,
											"end": 787,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 758,
											"end": 787,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 823,
											"end": 828,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 796,
											"end": 829,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 796,
											"end": 829,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 796,
											"end": 829,
											"name": "tag",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 796,
											"end": 829,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 696,
											"end": 835,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 696,
											"end": 835,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 696,
											"end": 835,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 841,
											"end": 918,
											"name": "tag",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 841,
											"end": 918,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 878,
											"end": 885,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 907,
											"end": 912,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 896,
											"end": 912,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 896,
											"end": 912,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 841,
											"end": 918,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 841,
											"end": 918,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 841,
											"end": 918,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 841,
											"end": 918,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 924,
											"end": 1046,
											"name": "tag",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 924,
											"end": 1046,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1015,
											"end": 1020,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 997,
											"end": 1021,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "tag",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 997,
											"end": 1021,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 990,
											"end": 995,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 987,
											"end": 1022,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1036,
											"end": 1037,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1033,
											"end": 1034,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1026,
											"end": 1038,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "tag",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 977,
											"end": 1040,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 924,
											"end": 1046,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 924,
											"end": 1046,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "tag",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1098,
											"end": 1103,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1136,
											"end": 1142,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1123,
											"end": 1143,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 1114,
											"end": 1143,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1114,
											"end": 1143,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "43"
										},
										{
											"begin": 1179,
											"end": 1184,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 1152,
											"end": 1185,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "tag",
											"source": 3,
											"value": "43"
										},
										{
											"begin": 1152,
											"end": 1185,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1052,
											"end": 1191,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1052,
											"end": 1191,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "tag",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1265,
											"end": 1271,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1322,
											"end": 1324,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1310,
											"end": 1319,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1301,
											"end": 1308,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1297,
											"end": 1320,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1293,
											"end": 1325,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 1328,
											"end": 1407,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 1328,
											"end": 1407,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 1328,
											"end": 1407,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1328,
											"end": 1407,
											"name": "tag",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 1328,
											"end": 1407,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "tag",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 1290,
											"end": 1409,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1448,
											"end": 1449,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1473,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 1518,
											"end": 1525,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1509,
											"end": 1515,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1498,
											"end": 1507,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1494,
											"end": 1516,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1473,
											"end": 1526,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 1473,
											"end": 1526,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1473,
											"end": 1526,
											"name": "tag",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 1473,
											"end": 1526,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1463,
											"end": 1526,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1463,
											"end": 1526,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1419,
											"end": 1536,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1575,
											"end": 1577,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1601,
											"end": 1654,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 1646,
											"end": 1653,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1637,
											"end": 1643,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1626,
											"end": 1635,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 1622,
											"end": 1644,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1601,
											"end": 1654,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1601,
											"end": 1654,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1601,
											"end": 1654,
											"name": "tag",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 1601,
											"end": 1654,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1591,
											"end": 1654,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1591,
											"end": 1654,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1546,
											"end": 1664,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1197,
											"end": 1671,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1197,
											"end": 1671,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1677,
											"end": 1795,
											"name": "tag",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 1677,
											"end": 1795,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1764,
											"end": 1788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 1782,
											"end": 1787,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1764,
											"end": 1788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 1764,
											"end": 1788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1764,
											"end": 1788,
											"name": "tag",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 1764,
											"end": 1788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1759,
											"end": 1762,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1752,
											"end": 1789,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1677,
											"end": 1795,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1677,
											"end": 1795,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1677,
											"end": 1795,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1801,
											"end": 2023,
											"name": "tag",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 1801,
											"end": 2023,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1894,
											"end": 1898,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 1932,
											"end": 1934,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1921,
											"end": 1930,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1917,
											"end": 1935,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1909,
											"end": 1935,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1909,
											"end": 1935,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1945,
											"end": 2016,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "52"
										},
										{
											"begin": 2013,
											"end": 2014,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2002,
											"end": 2011,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 1998,
											"end": 2015,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1989,
											"end": 1995,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1945,
											"end": 2016,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 1945,
											"end": 2016,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1945,
											"end": 2016,
											"name": "tag",
											"source": 3,
											"value": "52"
										},
										{
											"begin": 1945,
											"end": 2016,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1801,
											"end": 2023,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1801,
											"end": 2023,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1801,
											"end": 2023,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1801,
											"end": 2023,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 1801,
											"end": 2023,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										}
									]
								}
							},
							"sourceList": [
								"AccessControlBits.sol",
								"AccessControlledStorage.sol",
								"ProfileRegistry.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"getAccessPermissions(address,uint256)": "c48dbf6a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"contentId\",\"type\":\"uint256\"}],\"name\":\"getAccessPermissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAccessPermissions(address,uint256)\":{\"params\":{\"contentId\":\"the id of the content (file or directory) being requested\",\"user\":\"the user requesting access\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAccessPermissions(address,uint256)\":{\"notice\":\"Provides the access permissions for off-chain content controlled by this contract.  An  off-chain storage service calls this method to obtain a specific user's permissions for  accessing a given file or directory.  The method must return a bit field, with POSIX-like  bits for terminated, directory, read, write, append and execute (tdrwax).  See AccessControlBits.sol for a complete definition of the bit field returned by this method.  Note, the following content IDs are reserved:    CID  Purpose   ---  ------------------------------------------------------------------------------------------   0    The root of the bubble itself.  Any user with write permission to id 0 can construct the         bubble on an off-chain storage service.  Any user with read permission can list the        contents of the bubble's root directory.  ID 0 is always considered a directory and so the         Directory Bit permission returned by this contract is ignored.   \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ProfileRegistry.sol\":\"ProfileRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"AccessControlBits.sol\":{\"keccak256\":\"0x5074b55c7fd9399d90fcc29c094d1e3ac427ed8a7a9bd90a60f2738d6839eb5e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0a1fc60395fccbb06875bd47250f7d7dff74427bd3808c542fd94b8457f6630b\",\"dweb:/ipfs/QmXzaCsEwLfG2C3mDLKhP7ZftMy1uWp8bNy1aGdfHKXeEM\"]},\"AccessControlledStorage.sol\":{\"keccak256\":\"0x87fcb849962c533440b276e5db948b1ab7e65bd1039f6449883a409a54ac1f3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://03325e566a6d0099248d055ca40ef0622f8d61c7d6fd01ff7fce6d53ef673ee6\",\"dweb:/ipfs/QmPdX8ZCmwKTm6o37ZYipgaEWUwHzgPYuZd5yXfdeE1tpK\"]},\"ProfileRegistry.sol\":{\"keccak256\":\"0x3820d9f257b777f079bd52d63d3acc6d9b74402643996a3f8a1308b52efd5963\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3424d0af6104dc5fe6677b5df1507a5e564d33cd62afdb2af69bfe300234c2e\",\"dweb:/ipfs/QmQfbrEQtsQjWVDLxgKK1D9NfVzbYjUnNyBTHjZ5DdqC96\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 74,
								"contract": "ProfileRegistry.sol:ProfileRegistry",
								"label": "owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"getAccessPermissions(address,uint256)": {
								"notice": "Provides the access permissions for off-chain content controlled by this contract.  An  off-chain storage service calls this method to obtain a specific user's permissions for  accessing a given file or directory.  The method must return a bit field, with POSIX-like  bits for terminated, directory, read, write, append and execute (tdrwax).  See AccessControlBits.sol for a complete definition of the bit field returned by this method.  Note, the following content IDs are reserved:    CID  Purpose   ---  ------------------------------------------------------------------------------------------   0    The root of the bubble itself.  Any user with write permission to id 0 can construct the         bubble on an off-chain storage service.  Any user with read permission can list the        contents of the bubble's root directory.  ID 0 is always considered a directory and so the         Directory Bit permission returned by this contract is ignored.   "
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"AccessControlBits.sol": {
				"ast": {
					"absolutePath": "AccessControlBits.sol",
					"exportedSymbols": {
						"APPEND_BIT": [
							27
						],
						"BUBBLE_TERMINATED_BIT": [
							7
						],
						"DIRECTORY_BIT": [
							12
						],
						"DRWA_BITS": [
							45
						],
						"EXECUTE_BIT": [
							32
						],
						"NO_PERMISSIONS": [
							35
						],
						"READ_BIT": [
							17
						],
						"RWAX_BITS": [
							50
						],
						"RWA_BITS": [
							40
						],
						"WRITE_BIT": [
							22
						]
					},
					"id": 51,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:0"
						},
						{
							"constant": true,
							"id": 7,
							"mutability": "constant",
							"name": "BUBBLE_TERMINATED_BIT",
							"nameLocation": "743:21:0",
							"nodeType": "VariableDeclaration",
							"scope": 51,
							"src": "729:46:0",
							"stateVariable": false,
							"storageLocation": "default",
							"typeDescriptions": {
								"typeIdentifier": "t_uint256",
								"typeString": "uint256"
							},
							"typeName": {
								"id": 3,
								"name": "uint",
								"nodeType": "ElementaryTypeName",
								"src": "729:4:0",
								"typeDescriptions": {
									"typeIdentifier": "t_uint256",
									"typeString": "uint256"
								}
							},
							"value": {
								"commonType": {
									"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1",
									"typeString": "int_const 5789...(69 digits omitted)...9968"
								},
								"id": 6,
								"isConstant": false,
								"isLValue": false,
								"isPure": true,
								"lValueRequested": false,
								"leftExpression": {
									"hexValue": "31",
									"id": 4,
									"isConstant": false,
									"isLValue": false,
									"isPure": true,
									"kind": "number",
									"lValueRequested": false,
									"nodeType": "Literal",
									"src": "767:1:0",
									"typeDescriptions": {
										"typeIdentifier": "t_rational_1_by_1",
										"typeString": "int_const 1"
									},
									"value": "1"
								},
								"nodeType": "BinaryOperation",
								"operator": "<<",
								"rightExpression": {
									"hexValue": "323535",
									"id": 5,
									"isConstant": false,
									"isLValue": false,
									"isPure": true,
									"kind": "number",
									"lValueRequested": false,
									"nodeType": "Literal",
									"src": "772:3:0",
									"typeDescriptions": {
										"typeIdentifier": "t_rational_255_by_1",
										"typeString": "int_const 255"
									},
									"value": "255"
								},
								"src": "767:8:0",
								"typeDescriptions": {
									"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819968_by_1",
									"typeString": "int_const 5789...(69 digits omitted)...9968"
								}
							},
							"visibility": "internal"
						},
						{
							"constant": true,
							"id": 12,
							"mutability": "constant",
							"name": "DIRECTORY_BIT",
							"nameLocation": "791:13:0",
							"nodeType": "VariableDeclaration",
							"scope": 51,
							"src": "777:38:0",
							"stateVariable": false,
							"storageLocation": "default",
							"typeDescriptions": {
								"typeIdentifier": "t_uint256",
								"typeString": "uint256"
							},
							"typeName": {
								"id": 8,
								"name": "uint",
								"nodeType": "ElementaryTypeName",
								"src": "777:4:0",
								"typeDescriptions": {
									"typeIdentifier": "t_uint256",
									"typeString": "uint256"
								}
							},
							"value": {
								"commonType": {
									"typeIdentifier": "t_rational_28948022309329048855892746252171976963317496166410141009864396001978282409984_by_1",
									"typeString": "int_const 2894...(69 digits omitted)...9984"
								},
								"id": 11,
								"isConstant": false,
								"isLValue": false,
								"isPure": true,
								"lValueRequested": false,
								"leftExpression": {
									"hexValue": "31",
									"id": 9,
									"isConstant": false,
									"isLValue": false,
									"isPure": true,
									"kind": "number",
									"lValueRequested": false,
									"nodeType": "Literal",
									"src": "807:1:0",
									"typeDescriptions": {
										"typeIdentifier": "t_rational_1_by_1",
										"typeString": "int_const 1"
									},
									"value": "1"
								},
								"nodeType": "BinaryOperation",
								"operator": "<<",
								"rightExpression": {
									"hexValue": "323534",
									"id": 10,
									"isConstant": false,
									"isLValue": false,
									"isPure": true,
									"kind": "number",
									"lValueRequested": false,
									"nodeType": "Literal",
									"src": "812:3:0",
									"typeDescriptions": {
										"typeIdentifier": "t_rational_254_by_1",
										"typeString": "int_const 254"
									},
									"value": "254"
								},
								"src": "807:8:0",
								"typeDescriptions": {
									"typeIdentifier": "t_rational_28948022309329048855892746252171976963317496166410141009864396001978282409984_by_1",
									"typeString": "int_const 2894...(69 digits omitted)...9984"
								}
							},
							"visibility": "internal"
						},
						{
							"constant": true,
							"id": 17,
							"mutability": "constant",
							"name": "READ_BIT",
							"nameLocation": "831:8:0",
							"nodeType": "VariableDeclaration",
							"scope": 51,
							"src": "817:33:0",
							"stateVariable": false,
							"storageLocation": "default",
							"typeDescriptions": {
								"typeIdentifier": "t_uint256",
								"typeString": "uint256"
							},
							"typeName": {
								"id": 13,
								"name": "uint",
								"nodeType": "ElementaryTypeName",
								"src": "817:4:0",
								"typeDescriptions": {
									"typeIdentifier": "t_uint256",
									"typeString": "uint256"
								}
							},
							"value": {
								"commonType": {
									"typeIdentifier": "t_rational_14474011154664524427946373126085988481658748083205070504932198000989141204992_by_1",
									"typeString": "int_const 1447...(69 digits omitted)...4992"
								},
								"id": 16,
								"isConstant": false,
								"isLValue": false,
								"isPure": true,
								"lValueRequested": false,
								"leftExpression": {
									"hexValue": "31",
									"id": 14,
									"isConstant": false,
									"isLValue": false,
									"isPure": true,
									"kind": "number",
									"lValueRequested": false,
									"nodeType": "Literal",
									"src": "842:1:0",
									"typeDescriptions": {
										"typeIdentifier": "t_rational_1_by_1",
										"typeString": "int_const 1"
									},
									"value": "1"
								},
								"nodeType": "BinaryOperation",
								"operator": "<<",
								"rightExpression": {
									"hexValue": "323533",
									"id": 15,
									"isConstant": false,
									"isLValue": false,
									"isPure": true,
									"kind": "number",
									"lValueRequested": false,
									"nodeType": "Literal",
									"src": "847:3:0",
									"typeDescriptions": {
										"typeIdentifier": "t_rational_253_by_1",
										"typeString": "int_const 253"
									},
									"value": "253"
								},
								"src": "842:8:0",
								"typeDescriptions": {
									"typeIdentifier": "t_rational_14474011154664524427946373126085988481658748083205070504932198000989141204992_by_1",
									"typeString": "int_const 1447...(69 digits omitted)...4992"
								}
							},
							"visibility": "internal"
						},
						{
							"constant": true,
							"id": 22,
							"mutability": "constant",
							"name": "WRITE_BIT",
							"nameLocation": "866:9:0",
							"nodeType": "VariableDeclaration",
							"scope": 51,
							"src": "852:34:0",
							"stateVariable": false,
							"storageLocation": "default",
							"typeDescriptions": {
								"typeIdentifier": "t_uint256",
								"typeString": "uint256"
							},
							"typeName": {
								"id": 18,
								"name": "uint",
								"nodeType": "ElementaryTypeName",
								"src": "852:4:0",
								"typeDescriptions": {
									"typeIdentifier": "t_uint256",
									"typeString": "uint256"
								}
							},
							"value": {
								"commonType": {
									"typeIdentifier": "t_rational_7237005577332262213973186563042994240829374041602535252466099000494570602496_by_1",
									"typeString": "int_const 7237...(68 digits omitted)...2496"
								},
								"id": 21,
								"isConstant": false,
								"isLValue": false,
								"isPure": true,
								"lValueRequested": false,
								"leftExpression": {
									"hexValue": "31",
									"id": 19,
									"isConstant": false,
									"isLValue": false,
									"isPure": true,
									"kind": "number",
									"lValueRequested": false,
									"nodeType": "Literal",
									"src": "878:1:0",
									"typeDescriptions": {
										"typeIdentifier": "t_rational_1_by_1",
										"typeString": "int_const 1"
									},
									"value": "1"
								},
								"nodeType": "BinaryOperation",
								"operator": "<<",
								"rightExpression": {
									"hexValue": "323532",
									"id": 20,
									"isConstant": false,
									"isLValue": false,
									"isPure": true,
									"kind": "number",
									"lValueRequested": false,
									"nodeType": "Literal",
									"src": "883:3:0",
									"typeDescriptions": {
										"typeIdentifier": "t_rational_252_by_1",
										"typeString": "int_const 252"
									},
									"value": "252"
								},
								"src": "878:8:0",
								"typeDescriptions": {
									"typeIdentifier": "t_rational_7237005577332262213973186563042994240829374041602535252466099000494570602496_by_1",
									"typeString": "int_const 7237...(68 digits omitted)...2496"
								}
							},
							"visibility": "internal"
						},
						{
							"constant": true,
							"id": 27,
							"mutability": "constant",
							"name": "APPEND_BIT",
							"nameLocation": "902:10:0",
							"nodeType": "VariableDeclaration",
							"scope": 51,
							"src": "888:35:0",
							"stateVariable": false,
							"storageLocation": "default",
							"typeDescriptions": {
								"typeIdentifier": "t_uint256",
								"typeString": "uint256"
							},
							"typeName": {
								"id": 23,
								"name": "uint",
								"nodeType": "ElementaryTypeName",
								"src": "888:4:0",
								"typeDescriptions": {
									"typeIdentifier": "t_uint256",
									"typeString": "uint256"
								}
							},
							"value": {
								"commonType": {
									"typeIdentifier": "t_rational_3618502788666131106986593281521497120414687020801267626233049500247285301248_by_1",
									"typeString": "int_const 3618...(68 digits omitted)...1248"
								},
								"id": 26,
								"isConstant": false,
								"isLValue": false,
								"isPure": true,
								"lValueRequested": false,
								"leftExpression": {
									"hexValue": "31",
									"id": 24,
									"isConstant": false,
									"isLValue": false,
									"isPure": true,
									"kind": "number",
									"lValueRequested": false,
									"nodeType": "Literal",
									"src": "915:1:0",
									"typeDescriptions": {
										"typeIdentifier": "t_rational_1_by_1",
										"typeString": "int_const 1"
									},
									"value": "1"
								},
								"nodeType": "BinaryOperation",
								"operator": "<<",
								"rightExpression": {
									"hexValue": "323531",
									"id": 25,
									"isConstant": false,
									"isLValue": false,
									"isPure": true,
									"kind": "number",
									"lValueRequested": false,
									"nodeType": "Literal",
									"src": "920:3:0",
									"typeDescriptions": {
										"typeIdentifier": "t_rational_251_by_1",
										"typeString": "int_const 251"
									},
									"value": "251"
								},
								"src": "915:8:0",
								"typeDescriptions": {
									"typeIdentifier": "t_rational_3618502788666131106986593281521497120414687020801267626233049500247285301248_by_1",
									"typeString": "int_const 3618...(68 digits omitted)...1248"
								}
							},
							"visibility": "internal"
						},
						{
							"constant": true,
							"id": 32,
							"mutability": "constant",
							"name": "EXECUTE_BIT",
							"nameLocation": "939:11:0",
							"nodeType": "VariableDeclaration",
							"scope": 51,
							"src": "925:36:0",
							"stateVariable": false,
							"storageLocation": "default",
							"typeDescriptions": {
								"typeIdentifier": "t_uint256",
								"typeString": "uint256"
							},
							"typeName": {
								"id": 28,
								"name": "uint",
								"nodeType": "ElementaryTypeName",
								"src": "925:4:0",
								"typeDescriptions": {
									"typeIdentifier": "t_uint256",
									"typeString": "uint256"
								}
							},
							"value": {
								"commonType": {
									"typeIdentifier": "t_rational_1809251394333065553493296640760748560207343510400633813116524750123642650624_by_1",
									"typeString": "int_const 1809...(68 digits omitted)...0624"
								},
								"id": 31,
								"isConstant": false,
								"isLValue": false,
								"isPure": true,
								"lValueRequested": false,
								"leftExpression": {
									"hexValue": "31",
									"id": 29,
									"isConstant": false,
									"isLValue": false,
									"isPure": true,
									"kind": "number",
									"lValueRequested": false,
									"nodeType": "Literal",
									"src": "953:1:0",
									"typeDescriptions": {
										"typeIdentifier": "t_rational_1_by_1",
										"typeString": "int_const 1"
									},
									"value": "1"
								},
								"nodeType": "BinaryOperation",
								"operator": "<<",
								"rightExpression": {
									"hexValue": "323530",
									"id": 30,
									"isConstant": false,
									"isLValue": false,
									"isPure": true,
									"kind": "number",
									"lValueRequested": false,
									"nodeType": "Literal",
									"src": "958:3:0",
									"typeDescriptions": {
										"typeIdentifier": "t_rational_250_by_1",
										"typeString": "int_const 250"
									},
									"value": "250"
								},
								"src": "953:8:0",
								"typeDescriptions": {
									"typeIdentifier": "t_rational_1809251394333065553493296640760748560207343510400633813116524750123642650624_by_1",
									"typeString": "int_const 1809...(68 digits omitted)...0624"
								}
							},
							"visibility": "internal"
						},
						{
							"constant": true,
							"id": 35,
							"mutability": "constant",
							"name": "NO_PERMISSIONS",
							"nameLocation": "994:14:0",
							"nodeType": "VariableDeclaration",
							"scope": 51,
							"src": "980:32:0",
							"stateVariable": false,
							"storageLocation": "default",
							"typeDescriptions": {
								"typeIdentifier": "t_uint256",
								"typeString": "uint256"
							},
							"typeName": {
								"id": 33,
								"name": "uint",
								"nodeType": "ElementaryTypeName",
								"src": "980:4:0",
								"typeDescriptions": {
									"typeIdentifier": "t_uint256",
									"typeString": "uint256"
								}
							},
							"value": {
								"hexValue": "30",
								"id": 34,
								"isConstant": false,
								"isLValue": false,
								"isPure": true,
								"kind": "number",
								"lValueRequested": false,
								"nodeType": "Literal",
								"src": "1011:1:0",
								"typeDescriptions": {
									"typeIdentifier": "t_rational_0_by_1",
									"typeString": "int_const 0"
								},
								"value": "0"
							},
							"visibility": "internal"
						},
						{
							"constant": true,
							"id": 40,
							"mutability": "constant",
							"name": "RWA_BITS",
							"nameLocation": "1028:8:0",
							"nodeType": "VariableDeclaration",
							"scope": 51,
							"src": "1014:33:0",
							"stateVariable": false,
							"storageLocation": "default",
							"typeDescriptions": {
								"typeIdentifier": "t_uint256",
								"typeString": "uint256"
							},
							"typeName": {
								"id": 36,
								"name": "uint",
								"nodeType": "ElementaryTypeName",
								"src": "1014:4:0",
								"typeDescriptions": {
									"typeIdentifier": "t_uint256",
									"typeString": "uint256"
								}
							},
							"value": {
								"commonType": {
									"typeIdentifier": "t_rational_25329519520662917748906152970650479842902809145608873383631346501730997108736_by_1",
									"typeString": "int_const 2532...(69 digits omitted)...8736"
								},
								"id": 39,
								"isConstant": false,
								"isLValue": false,
								"isPure": true,
								"lValueRequested": false,
								"leftExpression": {
									"hexValue": "37",
									"id": 37,
									"isConstant": false,
									"isLValue": false,
									"isPure": true,
									"kind": "number",
									"lValueRequested": false,
									"nodeType": "Literal",
									"src": "1039:1:0",
									"typeDescriptions": {
										"typeIdentifier": "t_rational_7_by_1",
										"typeString": "int_const 7"
									},
									"value": "7"
								},
								"nodeType": "BinaryOperation",
								"operator": "<<",
								"rightExpression": {
									"hexValue": "323531",
									"id": 38,
									"isConstant": false,
									"isLValue": false,
									"isPure": true,
									"kind": "number",
									"lValueRequested": false,
									"nodeType": "Literal",
									"src": "1044:3:0",
									"typeDescriptions": {
										"typeIdentifier": "t_rational_251_by_1",
										"typeString": "int_const 251"
									},
									"value": "251"
								},
								"src": "1039:8:0",
								"typeDescriptions": {
									"typeIdentifier": "t_rational_25329519520662917748906152970650479842902809145608873383631346501730997108736_by_1",
									"typeString": "int_const 2532...(69 digits omitted)...8736"
								}
							},
							"visibility": "internal"
						},
						{
							"constant": true,
							"id": 45,
							"mutability": "constant",
							"name": "DRWA_BITS",
							"nameLocation": "1063:9:0",
							"nodeType": "VariableDeclaration",
							"scope": 51,
							"src": "1049:35:0",
							"stateVariable": false,
							"storageLocation": "default",
							"typeDescriptions": {
								"typeIdentifier": "t_uint256",
								"typeString": "uint256"
							},
							"typeName": {
								"id": 41,
								"name": "uint",
								"nodeType": "ElementaryTypeName",
								"src": "1049:4:0",
								"typeDescriptions": {
									"typeIdentifier": "t_uint256",
									"typeString": "uint256"
								}
							},
							"value": {
								"commonType": {
									"typeIdentifier": "t_rational_54277541829991966604798899222822456806220305312019014393495742503709279518720_by_1",
									"typeString": "int_const 5427...(69 digits omitted)...8720"
								},
								"id": 44,
								"isConstant": false,
								"isLValue": false,
								"isPure": true,
								"lValueRequested": false,
								"leftExpression": {
									"hexValue": "3135",
									"id": 42,
									"isConstant": false,
									"isLValue": false,
									"isPure": true,
									"kind": "number",
									"lValueRequested": false,
									"nodeType": "Literal",
									"src": "1075:2:0",
									"typeDescriptions": {
										"typeIdentifier": "t_rational_15_by_1",
										"typeString": "int_const 15"
									},
									"value": "15"
								},
								"nodeType": "BinaryOperation",
								"operator": "<<",
								"rightExpression": {
									"hexValue": "323531",
									"id": 43,
									"isConstant": false,
									"isLValue": false,
									"isPure": true,
									"kind": "number",
									"lValueRequested": false,
									"nodeType": "Literal",
									"src": "1081:3:0",
									"typeDescriptions": {
										"typeIdentifier": "t_rational_251_by_1",
										"typeString": "int_const 251"
									},
									"value": "251"
								},
								"src": "1075:9:0",
								"typeDescriptions": {
									"typeIdentifier": "t_rational_54277541829991966604798899222822456806220305312019014393495742503709279518720_by_1",
									"typeString": "int_const 5427...(69 digits omitted)...8720"
								}
							},
							"visibility": "internal"
						},
						{
							"constant": true,
							"id": 50,
							"mutability": "constant",
							"name": "RWAX_BITS",
							"nameLocation": "1100:9:0",
							"nodeType": "VariableDeclaration",
							"scope": 51,
							"src": "1086:35:0",
							"stateVariable": false,
							"storageLocation": "default",
							"typeDescriptions": {
								"typeIdentifier": "t_uint256",
								"typeString": "uint256"
							},
							"typeName": {
								"id": 46,
								"name": "uint",
								"nodeType": "ElementaryTypeName",
								"src": "1086:4:0",
								"typeDescriptions": {
									"typeIdentifier": "t_uint256",
									"typeString": "uint256"
								}
							},
							"value": {
								"commonType": {
									"typeIdentifier": "t_rational_27138770914995983302399449611411228403110152656009507196747871251854639759360_by_1",
									"typeString": "int_const 2713...(69 digits omitted)...9360"
								},
								"id": 49,
								"isConstant": false,
								"isLValue": false,
								"isPure": true,
								"lValueRequested": false,
								"leftExpression": {
									"hexValue": "3135",
									"id": 47,
									"isConstant": false,
									"isLValue": false,
									"isPure": true,
									"kind": "number",
									"lValueRequested": false,
									"nodeType": "Literal",
									"src": "1112:2:0",
									"typeDescriptions": {
										"typeIdentifier": "t_rational_15_by_1",
										"typeString": "int_const 15"
									},
									"value": "15"
								},
								"nodeType": "BinaryOperation",
								"operator": "<<",
								"rightExpression": {
									"hexValue": "323530",
									"id": 48,
									"isConstant": false,
									"isLValue": false,
									"isPure": true,
									"kind": "number",
									"lValueRequested": false,
									"nodeType": "Literal",
									"src": "1118:3:0",
									"typeDescriptions": {
										"typeIdentifier": "t_rational_250_by_1",
										"typeString": "int_const 250"
									},
									"value": "250"
								},
								"src": "1112:9:0",
								"typeDescriptions": {
									"typeIdentifier": "t_rational_27138770914995983302399449611411228403110152656009507196747871251854639759360_by_1",
									"typeString": "int_const 2713...(69 digits omitted)...9360"
								}
							},
							"visibility": "internal"
						}
					],
					"src": "32:1091:0"
				},
				"id": 0
			},
			"AccessControlledStorage.sol": {
				"ast": {
					"absolutePath": "AccessControlledStorage.sol",
					"exportedSymbols": {
						"AccessControlledStorage": [
							64
						]
					},
					"id": 65,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 52,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "AccessControlledStorage",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 53,
								"nodeType": "StructuredDocumentation",
								"src": "57:162:1",
								"text": " AccessControlledStorage interface\n \n Any smart contract that implements this interface can control off-chain storage using the \n Bubble Protocol."
							},
							"fullyImplemented": false,
							"id": 64,
							"linearizedBaseContracts": [
								64
							],
							"name": "AccessControlledStorage",
							"nameLocation": "231:23:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 54,
										"nodeType": "StructuredDocumentation",
										"src": "260:1176:1",
										"text": " Provides the access permissions for off-chain content controlled by this contract.  An \n off-chain storage service calls this method to obtain a specific user's permissions for \n accessing a given file or directory.  The method must return a bit field, with POSIX-like \n bits for terminated, directory, read, write, append and execute (tdrwax).\n \n See AccessControlBits.sol for a complete definition of the bit field returned by this\n method.\n \n Note, the following content IDs are reserved:\n \n   CID  Purpose\n   ---  ------------------------------------------------------------------------------------------\n   0    The root of the bubble itself.  Any user with write permission to id 0 can construct the \n        bubble on an off-chain storage service.  Any user with read permission can list the\n        contents of the bubble's root directory.  ID 0 is always considered a directory and so the \n        Directory Bit permission returned by this contract is ignored.  \n \n @param user the user requesting access\n @param contentId the id of the content (file or directory) being requested"
									},
									"functionSelector": "c48dbf6a",
									"id": 63,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAccessPermissions",
									"nameLocation": "1449:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 56,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "1479:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 63,
												"src": "1471:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 55,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1471:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 58,
												"mutability": "mutable",
												"name": "contentId",
												"nameLocation": "1493:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 63,
												"src": "1485:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 57,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1485:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1469:35:1"
									},
									"returnParameters": {
										"id": 62,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 61,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 63,
												"src": "1528:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 60,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1528:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1527:9:1"
									},
									"scope": 64,
									"src": "1440:97:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 65,
							"src": "221:1319:1",
							"usedErrors": []
						}
					],
					"src": "32:1510:1"
				},
				"id": 1
			},
			"ProfileRegistry.sol": {
				"ast": {
					"absolutePath": "ProfileRegistry.sol",
					"exportedSymbols": {
						"APPEND_BIT": [
							27
						],
						"AccessControlledStorage": [
							64
						],
						"BUBBLE_TERMINATED_BIT": [
							7
						],
						"DIRECTORY_BIT": [
							12
						],
						"DRWA_BITS": [
							45
						],
						"EXECUTE_BIT": [
							32
						],
						"NO_PERMISSIONS": [
							35
						],
						"ProfileRegistry": [
							116
						],
						"READ_BIT": [
							17
						],
						"RWAX_BITS": [
							50
						],
						"RWA_BITS": [
							40
						],
						"WRITE_BIT": [
							22
						]
					},
					"id": 117,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 66,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:2"
						},
						{
							"absolutePath": "AccessControlledStorage.sol",
							"file": "./AccessControlledStorage.sol",
							"id": 67,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 117,
							"sourceUnit": 65,
							"src": "58:39:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "AccessControlBits.sol",
							"file": "./AccessControlBits.sol",
							"id": 68,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 117,
							"sourceUnit": 51,
							"src": "98:33:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 69,
										"name": "AccessControlledStorage",
										"nameLocations": [
											"162:23:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 64,
										"src": "162:23:2"
									},
									"id": 70,
									"nodeType": "InheritanceSpecifier",
									"src": "162:23:2"
								}
							],
							"canonicalName": "ProfileRegistry",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 116,
							"linearizedBaseContracts": [
								116,
								64
							],
							"name": "ProfileRegistry",
							"nameLocation": "143:15:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 74,
									"mutability": "mutable",
									"name": "owner",
									"nameLocation": "199:5:2",
									"nodeType": "VariableDeclaration",
									"scope": 116,
									"src": "191:26:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 71,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "191:7:2",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": {
										"expression": {
											"id": 72,
											"name": "msg",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967281,
											"src": "207:3:2",
											"typeDescriptions": {
												"typeIdentifier": "t_magic_message",
												"typeString": "msg"
											}
										},
										"id": 73,
										"isConstant": false,
										"isLValue": false,
										"isPure": false,
										"lValueRequested": false,
										"memberLocation": "211:6:2",
										"memberName": "sender",
										"nodeType": "MemberAccess",
										"src": "207:10:2",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										63
									],
									"body": {
										"id": 114,
										"nodeType": "Block",
										"src": "328:193:2",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 92,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 88,
																		"name": "user",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 76,
																		"src": "354:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 87,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "346:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint160_$",
																		"typeString": "type(uint160)"
																	},
																	"typeName": {
																		"id": 86,
																		"name": "uint160",
																		"nodeType": "ElementaryTypeName",
																		"src": "346:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 89,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "346:13:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint160",
																	"typeString": "uint160"
																}
															],
															"id": 85,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "338:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 84,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "338:7:2",
																"typeDescriptions": {}
															}
														},
														"id": 90,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "338:22:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 91,
														"name": "contentId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 78,
														"src": "364:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "338:35:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 95,
												"nodeType": "IfStatement",
												"src": "334:56:2",
												"trueBody": {
													"expression": {
														"id": 93,
														"name": "RWA_BITS",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 40,
														"src": "382:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"functionReturnParameters": 83,
													"id": 94,
													"nodeType": "Return",
													"src": "375:15:2"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 98,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 96,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 76,
															"src": "400:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 97,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 74,
															"src": "408:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "400:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 101,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 99,
															"name": "contentId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 78,
															"src": "417:9:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 100,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "430:1:2",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "417:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "400:31:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 105,
												"nodeType": "IfStatement",
												"src": "396:52:2",
												"trueBody": {
													"expression": {
														"id": 103,
														"name": "RWA_BITS",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 40,
														"src": "440:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"functionReturnParameters": 83,
													"id": 104,
													"nodeType": "Return",
													"src": "433:15:2"
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 106,
														"name": "contentId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 78,
														"src": "458:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 107,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "471:1:2",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "458:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 111,
												"nodeType": "IfStatement",
												"src": "454:41:2",
												"trueBody": {
													"expression": {
														"id": 109,
														"name": "NO_PERMISSIONS",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 35,
														"src": "481:14:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"functionReturnParameters": 83,
													"id": 110,
													"nodeType": "Return",
													"src": "474:21:2"
												}
											},
											{
												"expression": {
													"id": 112,
													"name": "READ_BIT",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 17,
													"src": "508:8:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 83,
												"id": 113,
												"nodeType": "Return",
												"src": "501:15:2"
											}
										]
									},
									"functionSelector": "c48dbf6a",
									"id": 115,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAccessPermissions",
									"nameLocation": "231:20:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 80,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "301:8:2"
									},
									"parameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "261:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 115,
												"src": "253:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 75,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "253:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "contentId",
												"nameLocation": "275:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 115,
												"src": "267:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 77,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "267:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "251:35:2"
									},
									"returnParameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 115,
												"src": "319:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 81,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "319:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "318:9:2"
									},
									"scope": 116,
									"src": "222:299:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 117,
							"src": "134:390:2",
							"usedErrors": []
						}
					],
					"src": "33:491:2"
				},
				"id": 2
			}
		}
	}
}